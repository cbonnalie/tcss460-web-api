{
	"info": {
		"_postman_id": "dc0a6a39-fb68-46fa-9bf5-155ab205f1fc",
		"name": "Books GET",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38541945",
		"_collection_link": "https://tcss460-group-9.postman.co/workspace/Messages~2e6ff5c7-e4ec-43f4-a3fc-0a182c39f97e/collection/38541945-dc0a6a39-fb68-46fa-9bf5-155ab205f1fc?action=share&source=collection_link&creator=38541945"
	},
	"item": [
		{
			"name": "ISBN",
			"item": [
				{
					"name": "ISBN - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 200\", () => \r",
									"    pm.response.to.have.status(200)\r",
									");\r",
									"\r",
									"pm.test(\"Response body should have books field\", () => {\r",
									"    pm.expect(responseBody).to.haveOwnProperty(\"books\");\r",
									"});\r",
									"\r",
									"pm.test(\"Result should have all book fields\", () => {\r",
									"    const book = responseBody.books[0];\r",
									"    pm.expect(book).to.exist;\r",
									"    pm.expect(book).to.haveOwnProperty(\"id\");    \r",
									"    pm.expect(book).to.haveOwnProperty(\"isbn13\");\r",
									"    pm.expect(book).to.haveOwnProperty(\"authors\");\r",
									"    pm.expect(book).to.haveOwnProperty(\"publication\");\r",
									"    pm.expect(book).to.haveOwnProperty(\"original_title\");\r",
									"    pm.expect(book).to.haveOwnProperty(\"title\");\r",
									"    pm.expect(book).to.haveOwnProperty(\"ratings\");\r",
									"    pm.expect(book).to.haveOwnProperty(\"images\");\r",
									"})\r",
									"\r",
									"pm.test(\"Result should have correct data types\", () => {\r",
									"    const book = responseBody.books[0];\r",
									"    pm.expect(book.id).to.be.a(\"number\");\r",
									"    pm.expect(book.isbn13).to.be.a(\"string\");\r",
									"    pm.expect(book.authors).to.be.a(\"string\");\r",
									"    pm.expect(book.publication).to.be.a(\"number\");\r",
									"    pm.expect(book.original_title).to.be.a(\"string\");\r",
									"    pm.expect(book.title).to.be.a(\"string\");\r",
									"    pm.expect(book.ratings).to.be.an(\"object\");\r",
									"    pm.expect(book.images).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"Title should contain 'The Hunger Games'\", () => {\r",
									"    pm.expect(responseBody.books[0].title).to.include(\"The Hunger Games\");\r",
									"});\r",
									"\r",
									"pm.test(\"Author should be Suzanne Collins\", () => {\r",
									"    pm.expect(responseBody.books[0].authors).to.eql(\"Suzanne Collins\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/books?isbn13=9780439023480",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "isbn13",
									"value": "9780439023480"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ISBN - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"Response body should have message field\", () => {\r",
									"    pm.expect(responseBody).to.haveOwnProperty(\"message\");\r",
									"})\r",
									"\r",
									"pm.test(\"Message should be 'No books found for the given query'\", () => {\r",
									"    pm.expect(responseBody.message).to.equal(\"No books found for the given query\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/books?isbn13=9780439023481",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "isbn13",
									"value": "9780439023481"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ISBN - No Query Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseBody = pm.response.json();\r",
									"const queryParams = JSON.parse(pm.variables.replaceIn('{{body}}'));\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"URL should have no query parameter\", () => {\r",
									"    pm.expect(queryParams.length === 0);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const queryParams = pm.request.url.query;\r",
									"pm.collectionVariables.set('body', JSON.stringify({queryParams}));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/books?isbn13",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "isbn13",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ISBN - Wrong Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseBody = pm.response.json();\r",
									"const queryParams = JSON.parse(pm.variables.replaceIn('{{body}}'));\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"ISBN should not be of type number\", () => {\r",
									"    pm.expect(typeof queryParams.isbn !== 'number');\r",
									"})\r",
									"\r",
									"pm.test(\"Response body should have message field\", () => {\r",
									"    pm.expect(responseBody).to.haveOwnProperty(\"message\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/books?isbn13=abcdefg",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "isbn13",
									"value": "abcdefg"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ISBN - Not In Range (Greater)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const isbn = pm.request.url.query.find(q => q.key === 'isbn');\r",
									"if (isbn) {\r",
									"    pm.variables.set('isbn', isbn.value);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const isbn = pm.variables.get('isbn')\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"ISBN should be more than 13 digits\", () => {\r",
									"    pm.expect(String(isbn).length > 13);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/books?isbn13=2138945678237895645912",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "isbn13",
									"value": "2138945678237895645912"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ISBN - Not In Range (Lesser)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const isbn = pm.request.url.query.find(q => q.key === 'isbn');\r",
									"if (isbn) {\r",
									"    pm.variables.set('isbn', isbn.value);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const isbn = pm.variables.get('isbn')\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"ISBN should have less than 13 digits\", () => {\r",
									"    pm.expect(String(isbn).length < 13);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/books?isbn13=-5",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "isbn13",
									"value": "-5"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Tests for getting a book by ISBN13."
		},
		{
			"name": "Author",
			"item": [
				{
					"name": "200 Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic status test\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Response should have a books array\r",
									"pm.test(\"Response has books array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.haveOwnProperty('books');\r",
									"    pm.expect(jsonData.books).to.be.an('array');\r",
									"    pm.expect(jsonData.books.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"// The first book's author should include \"Stephen King\" (case-insensitive)\r",
									"pm.test(\"First book author is Stephen King\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.books[0].authors.toLowerCase()).to.include(\"stephen king\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/books?authors=Stephen King",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "authors",
									"value": "Stephen King"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 Valid/Lowercase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic status test\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Response should have a books array\r",
									"pm.test(\"Response has books array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('books');\r",
									"    pm.expect(jsonData.books).to.be.an('array');\r",
									"    pm.expect(jsonData.books.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"// The first book's author should include \"Stephen King\" (case-insensitive)\r",
									"pm.test(\"First book author is Stephen King\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.books[0].authors.toLowerCase()).to.include(\"stephen king\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/books?authors=stephen king",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "authors",
									"value": "stephen king"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 Valid/Uppercase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Basic status test\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Response should have a books array\r",
									"pm.test(\"Response has books array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('books');\r",
									"    pm.expect(jsonData.books).to.be.an('array');\r",
									"    pm.expect(jsonData.books.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"// The first book's author should include \"Stephen King\" (case-insensitive)\r",
									"pm.test(\"First book author is Stephen King\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.books[0].authors.toLowerCase()).to.include(\"stephen king\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/books?authors=STEPHEN KING",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "authors",
									"value": "STEPHEN KING"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 Author Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Status code should be 404\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    // Accepts either \"no books found\" or \"not found\" for broader compatibility\r",
									"    pm.expect(jsonData.message.toLowerCase()).to.satisfy(msg =>\r",
									"        msg.includes(\"not found\") || msg.includes(\"no books found\")\r",
									"    );\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/books?authors=NULL",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "authors",
									"value": "NULL"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Tests for getting a book by author."
		},
		{
			"name": "All Params",
			"item": [
				{
					"name": "GET All Params - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has 'books' field\", () => {\r",
									"    pm.expect(responseBody).to.have.property(\"books\");\r",
									"});\r",
									"\r",
									"responseBody.books.forEach((book, index) => {\r",
									"    pm.test(`Book #${index + 1} - rating average >= 4`, () => {\r",
									"        pm.expect(book.ratings.average).to.be.at.least(4);\r",
									"    });\r",
									"\r",
									"    pm.test(`Book #${index + 1} - author is A.A. Milne`, () => {\r",
									"        pm.expect(book.authors).to.include(\"A.A. Milne\");\r",
									"    });\r",
									"\r",
									"    pm.test(`Book #${index + 1} - publication year is 2004`, () => {\r",
									"        pm.expect(book.publication).to.eql(2004);\r",
									"    });\r",
									"\r",
									"    pm.test(`Book #${index + 1} - isbn13 is 9780375760370`, () => {\r",
									"        pm.expect(book.isbn13).to.eql(String(9780375760370));\r",
									"    });\r",
									"\r",
									"    pm.test(`Book #${index + 1} - original title contains 'intensity'`, () => {\r",
									"        pm.expect(book.original_title.toLowerCase()).to.include(\"intensity\");\r",
									"    });\r",
									"\r",
									"    pm.test(`Book #${index + 1} - title contains 'house'`, () => {\r",
									"        pm.expect(book.title.toLowerCase()).to.include(\"house\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/books?rating=4&authors=A.A.%Milne&publication_year=2004&isbn13=9780375760370&original_title=intensity&title=house",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "rating",
									"value": "4"
								},
								{
									"key": "authors",
									"value": "A.A.%Milne"
								},
								{
									"key": "publication_year",
									"value": "2004"
								},
								{
									"key": "isbn13",
									"value": "9780375760370"
								},
								{
									"key": "original_title",
									"value": "intensity"
								},
								{
									"key": "title",
									"value": "house"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Publication Year",
			"item": [
				{
					"name": "Publication - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 200\", () => {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have books field\", () => {\r",
									"    pm.expect(responseBody).to.haveOwnProperty(\"books\")\r",
									"});\r",
									"\r",
									"const publicationYear = (pm.request.url.query.toObject())[\"publication_year\"];\r",
									"pm.test(`Each book should have publication year ${publicationYear}`, () => {\r",
									"    responseBody[\"books\"].forEach(book => {\r",
									"        pm.expect(book[\"publication\"]).equals(Number(publicationYear));\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/books?publication_year=2015",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "publication_year",
									"value": "2015"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Publication - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 404\", () => {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have message field\", () => {\r",
									"    pm.expect(responseBody).to.haveOwnProperty(\"message\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/books?publication_year=2025",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "publication_year",
									"value": "2025"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Publication - Wrong Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status should be 400\", () => {\r",
									"    pm.response.to.have.status(400)\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have message field\", () => {\r",
									"    pm.expect(responseBody).to.haveOwnProperty(\"message\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/books?publication_year=abc",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "publication_year",
									"value": "abc"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Rating",
			"item": [
				{
					"name": "Rating - Not in Range (Greater)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseBody = pm.response.json();\r",
									"const rating = Number((pm.request.url.query.toObject())[\"rating\"]);\r",
									"\r",
									"pm.test(\"Response status is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have message field\", () => {\r",
									"    pm.expect(responseBody).to.haveOwnProperty(\"message\")\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/books?rating=6",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "rating",
									"value": "6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Rating - Not in Range (Lesser)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseBody = pm.response.json();\r",
									"const rating = Number((pm.request.url.query.toObject())[\"rating\"]);\r",
									"\r",
									"pm.test(\"Response status is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have message field\", () => {\r",
									"    pm.expect(responseBody).to.haveOwnProperty(\"message\")\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/books?rating=-1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "rating",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Rating - Wrong Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseBody = pm.response.json();\r",
									"const rating = (pm.request.url.query.toObject())[\"rating\"];\r",
									"\r",
									"pm.test(\"Response status is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have message field\", () => {\r",
									"    pm.expect(responseBody).to.haveOwnProperty(\"message\")\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/books?rating=abc",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "rating",
									"value": "abc"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{ACCESS_TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "body",
			"value": ""
		}
	]
}